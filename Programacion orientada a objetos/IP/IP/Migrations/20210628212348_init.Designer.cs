// <auto-generated />
using System;
using IP;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IP.Migrations
{
    [DbContext(typeof(BDDPContext))]
    [Migration("20210628212348_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("IP.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("DuiCitizen")
                        .HasColumnType("int")
                        .HasColumnName("dui_citizen");

                    b.Property<string>("IdSideEffect")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_side_effect");

                    b.Property<int?>("TypeDose")
                        .HasColumnType("int")
                        .HasColumnName("type_dose");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DuiCitizen" }, "FK_apoxcity");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("IP.Cabin", b =>
                {
                    b.Property<int>("IdCabin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cabin");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int?>("IdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_employee");

                    b.Property<int?>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("IdCabin")
                        .HasName("PRIMARY");

                    b.ToTable("cabin");
                });

            modelBuilder.Entity("IP.Citizen", b =>
                {
                    b.Property<int>("Dui")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dui");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int?>("IdAppointment")
                        .HasColumnType("int")
                        .HasColumnName("id_appointment");

                    b.Property<int?>("IdWorkSector")
                        .HasColumnType("int")
                        .HasColumnName("id_work_sector");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("Dui")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdWorkSector" }, "fk_Cityxsector");

                    b.ToTable("citizen");
                });

            modelBuilder.Entity("IP.Effectxvacunnaion", b =>
                {
                    b.Property<int>("IdSide")
                        .HasColumnType("int")
                        .HasColumnName("id_side");

                    b.Property<int>("IdVaci")
                        .HasColumnType("int")
                        .HasColumnName("id_vaci");

                    b.HasKey("IdSide", "IdVaci")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdVaci" }, "FK_efecxvacu");

                    b.ToTable("effectxvacunnaion");
                });

            modelBuilder.Entity("IP.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int?>("IdTypeEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_type_employee");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdTypeEmployee" }, "FK_Emxtype");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("IP.Employeexappo", b =>
                {
                    b.Property<int>("IdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_employee");

                    b.Property<int>("IdAppointment")
                        .HasColumnType("int")
                        .HasColumnName("id_appointment");

                    b.HasKey("IdEmployee", "IdAppointment")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAppointment" }, "FK_appoxid");

                    b.ToTable("employeexappo");
                });

            modelBuilder.Entity("IP.Employeexcabin", b =>
                {
                    b.Property<int>("IdEmployee")
                        .HasColumnType("int")
                        .HasColumnName("id_employee");

                    b.Property<int>("IdCabin")
                        .HasColumnType("int")
                        .HasColumnName("id_cabin");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<TimeSpan?>("Hora")
                        .HasColumnType("time")
                        .HasColumnName("hora");

                    b.HasKey("IdEmployee", "IdCabin")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCabin" }, "FK_empoxcabin");

                    b.ToTable("employeexcabin");
                });

            modelBuilder.Entity("IP.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Disease")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("disease");

                    b.HasKey("Id");

                    b.ToTable("side_effect");
                });

            modelBuilder.Entity("IP.TypeEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("type_employee");
                });

            modelBuilder.Entity("IP.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("DuiCitizen")
                        .HasColumnType("int")
                        .HasColumnName("dui_citizen");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int?>("IdAppointment")
                        .HasColumnType("int")
                        .HasColumnName("id_appointment");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdAppointment" }, "FK_Vacixapo");

                    b.HasIndex(new[] { "DuiCitizen" }, "FK_Vacixdui");

                    b.ToTable("vaccination");
                });

            modelBuilder.Entity("IP.WorkSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Sector")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sector");

                    b.HasKey("Id");

                    b.ToTable("work_sector");
                });

            modelBuilder.Entity("IP.Appointment", b =>
                {
                    b.HasOne("IP.Citizen", "DuiCitizenNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("DuiCitizen")
                        .HasConstraintName("FK_apoxcity");

                    b.Navigation("DuiCitizenNavigation");
                });

            modelBuilder.Entity("IP.Citizen", b =>
                {
                    b.HasOne("IP.WorkSector", "IdWorkSectorNavigation")
                        .WithMany("Citizens")
                        .HasForeignKey("IdWorkSector")
                        .HasConstraintName("fk_Cityxsector");

                    b.Navigation("IdWorkSectorNavigation");
                });

            modelBuilder.Entity("IP.Effectxvacunnaion", b =>
                {
                    b.HasOne("IP.SideEffect", "IdSideNavigation")
                        .WithMany("Effectxvacunnaions")
                        .HasForeignKey("IdSide")
                        .HasConstraintName("FK_sidexvacci")
                        .IsRequired();

                    b.HasOne("IP.Vaccination", "IdVaciNavigation")
                        .WithMany("Effectxvacunnaions")
                        .HasForeignKey("IdVaci")
                        .HasConstraintName("FK_efecxvacu")
                        .IsRequired();

                    b.Navigation("IdSideNavigation");

                    b.Navigation("IdVaciNavigation");
                });

            modelBuilder.Entity("IP.Employee", b =>
                {
                    b.HasOne("IP.TypeEmployee", "IdTypeEmployeeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdTypeEmployee")
                        .HasConstraintName("FK_Emxtype");

                    b.Navigation("IdTypeEmployeeNavigation");
                });

            modelBuilder.Entity("IP.Employeexappo", b =>
                {
                    b.HasOne("IP.Appointment", "IdAppointmentNavigation")
                        .WithMany("Employeexappos")
                        .HasForeignKey("IdAppointment")
                        .HasConstraintName("FK_appoxid")
                        .IsRequired();

                    b.HasOne("IP.Employee", "IdEmployeeNavigation")
                        .WithMany("Employeexappos")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("FKemploxid")
                        .IsRequired();

                    b.Navigation("IdAppointmentNavigation");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("IP.Employeexcabin", b =>
                {
                    b.HasOne("IP.Cabin", "IdCabinNavigation")
                        .WithMany("Employeexcabins")
                        .HasForeignKey("IdCabin")
                        .HasConstraintName("FK_empoxcabin")
                        .IsRequired();

                    b.HasOne("IP.Employee", "IdEmployeeNavigation")
                        .WithMany("Employeexcabins")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("FK_empox")
                        .IsRequired();

                    b.Navigation("IdCabinNavigation");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("IP.Vaccination", b =>
                {
                    b.HasOne("IP.Appointment", "IdAppointmentNavigation")
                        .WithMany("Vaccinations")
                        .HasForeignKey("IdAppointment")
                        .HasConstraintName("FK_Vacixapo");

                    b.Navigation("IdAppointmentNavigation");
                });

            modelBuilder.Entity("IP.Appointment", b =>
                {
                    b.Navigation("Employeexappos");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("IP.Cabin", b =>
                {
                    b.Navigation("Employeexcabins");
                });

            modelBuilder.Entity("IP.Citizen", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("IP.Employee", b =>
                {
                    b.Navigation("Employeexappos");

                    b.Navigation("Employeexcabins");
                });

            modelBuilder.Entity("IP.SideEffect", b =>
                {
                    b.Navigation("Effectxvacunnaions");
                });

            modelBuilder.Entity("IP.TypeEmployee", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("IP.Vaccination", b =>
                {
                    b.Navigation("Effectxvacunnaions");
                });

            modelBuilder.Entity("IP.WorkSector", b =>
                {
                    b.Navigation("Citizens");
                });
#pragma warning restore 612, 618
        }
    }
}
